{"version":3,"file":"string-replace-middleware.esm.js","sources":["../src/stringReplaceStream.ts","../src/index.ts"],"sourcesContent":["import { Transform, TransformCallback } from 'stream';\nimport escapeStringRegexp from 'escape-string-regexp';\n\ntype Options = {\n  encoding: BufferEncoding;\n  ignoreCase: boolean;\n};\ntype Replacer = {\n  matcher: RegExp;\n  replace: string;\n};\n\nconst defaultOptions: Options = {\n  encoding: 'utf8',\n  ignoreCase: true,\n};\n\nfunction buildReplacers(\n  replacements: Record<string, string>,\n  opts: Options\n): Replacer[] {\n  return Object.keys(replacements)\n    .sort((a, b) => b.length - a.length)\n    .map(search => ({\n      matcher: new RegExp(\n        escapeStringRegexp(search),\n        opts.ignoreCase ? 'gmi' : 'gm'\n      ),\n      replace: replacements[search],\n    }));\n}\n\nfunction getMaxSearchLength(replacements: Record<string, string>): number {\n  return Object.keys(replacements).reduce(\n    (acc, search) => Math.max(acc, search.length),\n    0\n  );\n}\n\nexport default function StringReplaceStream(\n  replacements: Record<string, string>,\n  options: Partial<Options> = {}\n) {\n  const opts: Options = { ...defaultOptions, ...options };\n  const replacers = buildReplacers(replacements, opts);\n  const maxSearchLength = getMaxSearchLength(replacements);\n  let tail = '';\n\n  const replaceSlidingWindow = (\n    haystack: string,\n    replacers: Replacer[],\n    replaceBefore: number\n  ) => {\n    /**\n     * foo => foo123\n     * foo ba | r ba\n     * foo123 ba | r baz\n     * foo123 | bar baz\n     *\n     * foo => f\n     * foo bar baz => f bar baz\n     */\n    let body = haystack;\n    replacers.forEach(replacer => {\n      body =\n        body\n          .slice(0, replaceBefore)\n          .replace(replacer.matcher, replacer.replace) +\n        body.slice(replaceBefore);\n    });\n\n    return [body.slice(0, replaceBefore), body.slice(replaceBefore)];\n  };\n\n  const transform = function(\n    buf: Buffer,\n    _enc: BufferEncoding,\n    cb: TransformCallback\n  ) {\n    const replaceBefore = maxSearchLength * 2;\n    const haystack = tail + buf.toString(opts.encoding);\n    let body = '';\n\n    if (haystack.length < maxSearchLength * 3 - 2) {\n      tail = haystack;\n      cb(null, '');\n      return;\n    }\n\n    [body, tail] = replaceSlidingWindow(haystack, replacers, replaceBefore);\n\n    cb(null, body);\n  };\n  const flush = function(cb: TransformCallback) {\n    if (!tail) {\n      cb();\n      return;\n    }\n\n    const body = replacers.reduce(\n      (acc, replacer) => acc.replace(replacer.matcher, replacer.replace),\n      tail\n    );\n    cb(null, body);\n  };\n\n  return new Transform({ transform, flush });\n}\n","import { NextFunction, Request, Response } from 'express';\nimport hijackResponse from 'hijackresponse';\nimport stringReplaceStream from './stringReplaceStream';\n\nexport type Options = Record<'contentTypeFilterRegexp', RegExp>;\n\nexport type ReplaceFunction = (req: Request, res: Response) => string;\n\nconst defaultOptions: Options = {\n  contentTypeFilterRegexp: /^text\\/|^application\\/json$|^application\\/xml$/,\n};\n\nexport const stringReplace = (\n  replacements: Record<string, string | ReplaceFunction>,\n  options: Partial<Options> = {}\n) => {\n  const opts = { ...defaultOptions, ...options };\n\n  // Split string and function replacements so we don't have to process them on every request\n  const stringReplacements: Record<string, string> = {};\n  const functionReplacements: Record<string, ReplaceFunction> = {};\n  Object.keys(replacements).forEach(function(key, _index) {\n    const replacement = replacements[key];\n    if (typeof replacement === 'function') {\n      functionReplacements[key] = replacement;\n    } else {\n      stringReplacements[key] = replacement;\n    }\n  });\n  const hasFunctionReplacements = Object.keys(functionReplacements).length > 0;\n\n  return (req: Request, originalResponse: Response, next: NextFunction) => {\n    hijackResponse(originalResponse, function(err, res) {\n      const contentType = res.get('content-type') || '';\n      if (opts.contentTypeFilterRegexp.test(contentType)) {\n        if (err) {\n          res.unhijack(); // Make the original res object work again\n          return next(err);\n        }\n        res.removeHeader('content-length');\n\n        let scopedReplacements: Record<string, string>;\n        if (hasFunctionReplacements) {\n          // If we have dynamic replacements, calculate for this request\n          scopedReplacements = { ...stringReplacements };\n          Object.keys(functionReplacements).forEach(function(key, _index) {\n            scopedReplacements[key] = functionReplacements[key](req, res);\n          });\n        } else {\n          // No dynamic replacements, safe to share the global\n          scopedReplacements = stringReplacements;\n        }\n\n        res.pipe(stringReplaceStream(scopedReplacements)).pipe(res);\n      } else {\n        return res.unhijack();\n      }\n    });\n    next();\n  };\n};\n\nmodule.exports = stringReplace;\nmodule.exports.stringReplace = stringReplace;\n"],"names":["defaultOptions","encoding","ignoreCase","buildReplacers","replacements","opts","Object","keys","sort","a","b","length","map","search","matcher","RegExp","escapeStringRegexp","replace","getMaxSearchLength","reduce","acc","Math","max","StringReplaceStream","options","_extends","replacers","maxSearchLength","tail","replaceSlidingWindow","haystack","replaceBefore","body","forEach","replacer","slice","transform","buf","_enc","cb","toString","_replaceSlidingWindow","flush","Transform","contentTypeFilterRegexp","stringReplace","stringReplacements","functionReplacements","key","_index","replacement","hasFunctionReplacements","req","originalResponse","next","hijackResponse","err","res","contentType","get","test","unhijack","removeHeader","scopedReplacements","pipe","stringReplaceStream","module","exports"],"mappings":"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"}